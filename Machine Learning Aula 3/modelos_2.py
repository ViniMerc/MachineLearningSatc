# -*- coding: utf-8 -*-
"""Modelos 2

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1l-WaIh2O_k_QKFIb6qDp5Oe5j9UbfZgy
"""

import numpy as np 
import pandas as pd

dataframe = pd.read_csv('auto-mpg.csv')

dataframe.head()
#mpg (autonomia = km/l), cilindros, volume deslocamento, portencia , peso, aceleração, ano do modelo, origem, nome do carro

dataframe.info()

dataframe.describe()

#Seleciona o tipo de correlação entre as variaveis do pandas como pearson
dataframe.corr(method='pearson')

from matplotlib import pyplot
import seaborn as sns

#vizualixação em heatmap das correlações das variaveis
a4_dims = (11.7, 8.27)
fig, ax = pyplot.subplots(figsize=a4_dims)
sns.heatmap(dataframe.corr(method='pearson'),annot=True)

#vizualixação em heatmap das correlações das variaveis
a4_dims = (11.7, 8.27)
fig, ax = pyplot.subplots(figsize=a4_dims)
sns.heatmap(dataframe.corr(method='spearman'),annot=True)





dataframeIris = pd.read_csv('Iris.csv',index_col=0)

dataframeIris.head()

dataframeIris.describe()

dataframeIris.info()

from sklearn.feature_selection import RFE
from sklearn.tree import DecisionTreeClassifier

modelDecisionTreeCl = DecisionTreeClassifier()

selector = RFE(modelDecisionTreeCl,n_features_to_select=2)

x = dataframeIris.drop(['Species'], axis=1)
y = dataframeIris['Species']

featuresSelection = selector.fit(x,y)

x.columns

featuresSelection.support_

dataframeIris['SepalArea (cm^2)'] = dataframeIris['SepalLengthCm'] * dataframeIris['SepalWidthCm']

dataframeIris['PetalArea (cm^2)'] = dataframeIris['PetalLengthCm'] * dataframeIris['PetalLengthCm']

dataframeIris.drop(['SepalLengthCm','SepalWidthCm','PetalLengthCm','PetalWidthCm'],axis=1,inplace=True)

dataframeIris.head()

dataframe = dataframe[dataframe['horsepower'] != '?']

dataframe['horsepower'] = dataframe ['horsepower'].astype(float)

x = dataframe.drop(['car name'],axis=1)

from sklearn.decomposition import PCA

pca = PCA(n_components=2)

pca.fit(x)

pca.explained_variance_ratio_

xPCA = pca.fit_transform(x)

dataframePCA = pd.DataFrame(xPCA,columns=['Componente 1','Componente 2'])

dataframePCA.head()